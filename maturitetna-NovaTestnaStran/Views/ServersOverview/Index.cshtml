@model maturitetna_NovaTestnaStran.Controllers.ModelView
@{
    ViewData["Title"] = "Index";
}

@* <div class="dropdown">
    <a class="btn btn-secondary dropdown-toggle" href="#" role="button" id="dropdownMenuLink" data-bs-toggle="dropdown" aria-expanded="false">
        <p>@Model.Server.ServerName</p>
    </a>
    <ul class="dropdown-menu" aria-labelledby="dropdownMenuLink" style="max-height: 200px; overflow-y: auto;">
        @foreach (var item in Model.Servers)
        {
            <li><a class="dropdown-item" asp-controller="ServersOverview" asp-action="" asp-route-id="@item.Id">@item.ServerName</a></li>
        }
    </ul>
</div> *@

<head>
    @*<script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
    $1$ <script src="https://cdn.jsdelivr.net/npm/chart.js"></script> #1#
    <script src="https://unpkg.com/chart.js@2.8.0/dist/Chart.bundle.js"></script>
    $1$ <script src="https://cdn.jsdelivr.net/npm/chartjs-gauge"></script> #1#
    <script src="https://unpkg.com/chartjs-gauge@0.3.0/dist/chartjs-gauge.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/progressbar.js/1.1.0/progressbar.min.js"></script>*@
</head>

<style>
    body {
        background-color: #f8f9fa;
        margin: 0;
        padding: 0;
        background-image: url("back12.jpg");
        background-repeat: no-repeat;
        background-size: cover;
    }

    nav,
    .sidebar,
    .tab-content {
        background: rgba(255, 255, 255, 0.75);
        backdrop-filter: blur(5px);
        -webkit-backdrop-filter: blur(5px);
    }

    .glass {
        background: rgba(222, 226, 231, 0.407);
        box-shadow: 0 8px 20px 0 rgba(31, 38, 135, 0.37);
        backdrop-filter: blur(1px);
        -webkit-backdrop-filter: blur(5px);
        border-radius: 10px;
        border: 1px solid rgba(255, 255, 255, 0.18);
        padding: 20px;
        margin-bottom: 30px;
    }

    .sidebar {
        position: fixed;
        top: 0;
        bottom: 0;
        left: 0;
        width: 200px;
        padding-top: 56px;
        margin-top: 105px;
    }

    /* .main-content {
        margin-left: 200px;
        margin-top: 50px;
        padding-top: 56px;
    } */

    .dashboard-item {
        margin: 0 15px 30px 15px;
    }

    .half {
        flex: 0 0 calc(50% - 30px);
    }

    .quarter {
        flex: 0 0 calc(25% - 30px);
    }

    .full-width {
        flex: 0 0 100%;
    }

    .nav-tabs {
        margin-bottom: -1px;
    }

        .nav-tabs .nav-link.active {
            background-color: #fff;
            border-bottom-color: #fff;
        }

    .tab-content {
        border: 1px solid rgba(255, 255, 255, 0.18);
        border-radius: 0 0 10px 10px;
        padding: 10px;
    }

    .gauge-chart {
        max-width: 300px;
        margin: 0 auto;
    }
</style>
@* <div class="sidebar glass">
    <ul class="list-unstyled">
        <li>- Server 1</li>
        <li>- Server 2</li>
    </ul>
</div> *@

<div class="main-content">
    <div class="d-flex flex-wrap justify-content-between">
        <div class="dashboard-item glass half">
            <h4>CPU Stanje</h4>
            <div><canvas id="cpuGauge" class="gauge-chart"></canvas></div>
        </div>
        <div class="dashboard-item glass half">
            <h4>RAM Stanje</h4>
            <div><canvas id="ramGauge" class="gauge-chart"></canvas></div>
        </div>
    </div>
    <div class="d-flex flex-wrap justify-content-between">
        <div class="dashboard-item glass quarter">
            <h4>Stanje DB</h4>
        </div>
        <div class="dashboard-item glass quarter">
            <h4>Run Time</h4>
        </div>
        <div class="dashboard-item glass quarter">
            <h4>Stanje MailServer</h4>
        </div>
        <div class="dashboard-item glass quarter">
            <h4>CPU Cores</h4>
        </div>
    </div>
    <div class="dashboard-item glass full-width">
        <h4>Trdi disk podatki</h4>
        <div id="diskProgressContainer"></div>
    </div>
    <div class="dashboard-item glass full-width">
        <h4>Zgodovina</h4>
        <nav>
            <div class="nav nav-tabs" id="nav-tab" role="tablist">
                <a class="nav-item nav-link active" id="nav-cpu-tab" data-toggle="tab" href="#cpu-content" role="tab" aria-controls="cpu-content" aria-selected="true">CPU</a>
                <a class="nav-item nav-link" id="nav-ram-tab" data-toggle="tab" href="#ram-content" role="tab" aria-controls="ram-content" aria-selected="false">RAM</a>
            </div>
        </nav>
        <div class="tab-content" id="nav-tabContent">
            <div class="tab-pane fade show active" id="cpu-content" role="tabpanel" aria-labelledby="nav-cpu-tab">
                <canvas id="cpuHistoryChart"></canvas>
            </div>
            <div class="tab-pane fade" id="ram-content" role="tabpanel" aria-labelledby="nav-ram-tab">
                <canvas id="ramHistoryChart"></canvas>
            </div>
        </div>
    </div>
</div>

<script>
    $(document).ready(function () {
        var cpuHistoryChart = createHistoryChart('cpuHistoryChart', [6, 5, 8, 3, 5, 1, 4], 'CPU Usage');
        var ramHistoryChart;

        // GLEDA KIR KURCEV TAB JE OFJEN
        $('a[data-toggle="tab"]').on('shown.bs.tab', function (e) {
            var activeTab = $(e.target).attr('href');

            if (activeTab === '#ram-content') {
                if (!ramHistoryChart) {
                    ramHistoryChart = createHistoryChart('ramHistoryChart', [28, 48, 40, 19, 86, 27, 90], 'RAM Usage');
                } else {
                    ramHistoryChart.update();
                }
            } else if (activeTab === '#cpu-content') {
                cpuHistoryChart.update();
            }
        });
        connectToMQTT(8080);
        initializeGauges();
        initializeDiskProgressBar();
    });
    
    function connectToMQTT(port) {
                let connected = false;
                const client = mqtt.connect('ws://test.mosquitto.org:' + port);
    
                client.on("connect", function () {
                    console.log("Connected to MQTT broker over WebSocket on port " + port);
                    client.subscribe("test123");
                    connected = true;
                });
                client.on("message", function (topic, message) {
                    try{
                        const data = JSON.parse(message.toString());
                        updateGraphs(data);
                    } catch (e){
                        
                    }
                });
    
                setTimeout(function () {
                    if (!connected) {
                        console.error("Failed to establish MQTT connection on port ");
                        if (port == 8080) {
                            connectToMQTT(8081);
                        } else if (port == 8081) {
                            connectToMQTT(8080);
                        }
                        client.end();
                    }
                }, 5000);
            }
            
    function updateGraphs(valuesInJson) {
        console.log(parseFloat(valuesInJson.CpuUsage).toFixed(2));
        console.log(valuesInJson.CpuUsage);
        
        updateGauge('cpuGauge', parseFloat(valuesInJson.CpuUsage).toFixed(2));
    }
    
    function updateGauge(gaugeId, value) {
        
    }


    function initializeGauges() {
        // CPU Gauge
        var cpuGaugeCtx = document.getElementById("cpuGauge").getContext("2d");
        var cpuGauge = new Chart(cpuGaugeCtx, gaugeChartConfig(100));
        // RAM Gauge
        var ramGaugeCtx = document.getElementById("ramGauge").getContext("2d");
        var ramGauge = new Chart(ramGaugeCtx, gaugeChartConfig(50));

       
    }

    function gaugeChartConfig(value) {
        return {
            type: 'gauge',
            data: {
                datasets: [{
                    value: value,
                    minValue: 0,
                    maxValue: 100,
                    data: [33, 66, 100],
                    backgroundColor: [
                        "rgba(75, 192, 192, 0.5)", //0-33
                        "rgba(255, 205, 86, 0.5)", //34-66
                        "rgba(255, 99, 132, 0.5)"  //67-100
                    ]
                }]
            },
            options: gaugeChartOptions()
        };
    }

    function gaugeChartOptions() {
        return {
            needle: {
                radiusPercentage: 15,
                widthPercentage: 3.2,
                lengthPercentage: 80,
                color: 'rgba(0, 0, 0, 1)'
            },
            valueLabel: {
                display: true,
                formatter: (value) => Math.round(value) + '%',
                color: 'rgba(255, 255, 255, 1)',
                backgroundColor: 'rgba(0, 0, 0, 1)',
                text: 3,
                borderRadius: 5,
                padding: { top: 10, bottom: 10 }
            }
        };
    }

    function initializeDiskProgressBar() {
        var usedSpace = 25;
        var totalSpace = 100;
        var usedPercentage = usedSpace / totalSpace; // Racuna procente

        var bar = new ProgressBar.Line('#diskProgressContainer', {
            strokeWidth: 1, //Debelina kurcevga traka
            easing: 'easeInOut',
            duration: 1400,
            color: '#007bff',
            trailColor: '#eee',
            trailWidth: 1,
            svgStyle: { width: '100%', height: '100%' },
            text: {
                style: {
                    color: '#999',
                    position: 'absolute',
                    right: '5%',
                    top: '30px',
                    padding: 0,
                    margin: 0,
                    transform: null
                },
                autoStyleContainer: false
            },
            from: { color: '#FFEA82' },
            to: { color: '#ED6A5A' },
            step: (state, bar) => {
                bar.setText(usedSpace + ' / ' + totalSpace + ' GB');
            }
        });

        bar.animate(usedPercentage);
    }

    function createHistoryChart(canvasId, chartData, chartLabel) {
        return new Chart(document.getElementById(canvasId), {
            type: 'bar',
            data: {
                labels: ['00:00', '01:00', '02:00', '03:00', '04:00', '05:00', '06:00'],
                datasets: [{
                    label: chartLabel,
                    data: chartData,
                    backgroundColor: 'rgba(54, 162, 235, 0.5)',
                    borderColor: 'rgba(54, 162, 235, 1)',
                    borderWidth: 1
                }]
            },
            options: {
                scales: {
                    yAxes: [{
                        ticks: {
                            beginAtZero: true
                        }
                    }]
                },
                responsive: true,
                maintainAspectRatio: false
            }
        });
    }
</script>



