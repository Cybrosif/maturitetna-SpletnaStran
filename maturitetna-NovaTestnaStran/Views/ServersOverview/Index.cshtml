@model maturitetna_NovaTestnaStran.Controllers.ModelView
@{
    ViewData["Title"] = "Index";
}

 @*<div class="dropdown">
    <a class="btn btn-secondary dropdown-toggle" href="#" role="button" id="dropdownMenuLink" data-bs-toggle="dropdown" aria-expanded="false">
        <p>@Model.Server.ServerName</p>
    </a>
    <ul class="dropdown-menu" aria-labelledby="dropdownMenuLink" style="max-height: 200px; overflow-y: auto;">
        @foreach (var item in Model.Servers)
        {
            <li><p class="dropdown-item" asp-controller="ServersOverview" asp-action="" asp-route-id="@item.Id">@item.ServerName</p></li>
        }
    </ul>
 </div> *@
@* <select class="form-select" id="serverSelect" aria-label="Default select example">
  <option selected>Izberite strežnik</option>
  @foreach (var item in Model.Servers)
          {
              <option value="@item.Id">@item.ServerName</option>
          }
</select> *@

<head>
    @*<script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
    $1$ <script src="https://cdn.jsdelivr.net/npm/chart.js"></script> #1#
    <script src="https://unpkg.com/chart.js@2.8.0/dist/Chart.bundle.js"></script>
    $1$ <script src="https://cdn.jsdelivr.net/npm/chartjs-gauge"></script> #1#
    <script src="https://unpkg.com/chartjs-gauge@0.3.0/dist/chartjs-gauge.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/progressbar.js/1.1.0/progressbar.min.js"></script>*@
</head>

<style>
    body {
        background-color: #f8f9fa;
        margin: 0;
        padding: 0;
        background-image: url("back12.jpg");
        background-repeat: no-repeat;
        background-size: cover;
    }

    nav,
    .sidebar,
    .tab-content {
        background: rgba(255, 255, 255, 0.75);
        backdrop-filter: blur(5px);
        -webkit-backdrop-filter: blur(5px);
    }

    .glass {
        background: rgba(222, 226, 231, 0.407);
        box-shadow: 0 8px 20px 0 rgba(31, 38, 135, 0.37);
        backdrop-filter: blur(1px);
        -webkit-backdrop-filter: blur(5px);
        border-radius: 10px;
        border: 1px solid rgba(255, 255, 255, 0.18);
        padding: 20px;
        margin-bottom: 30px;
    }

    .sidebar {
        position: fixed;
        top: 0;
        bottom: 0;
        left: 0;
        width: 200px;
        padding-top: 56px;
        margin-top: 105px;
    }

    .dashboard-item {
        margin: 0 15px 30px 15px;
    }

    .half {
        flex: 0 0 calc(50% - 30px);
    }

    .quarter {
        flex: 0 0 calc(25% - 30px);
    }

    .full-width {
        flex: 0 0 100%;
    }

    .nav-tabs {
        margin-bottom: -1px;
    }

        .nav-tabs .nav-link.active {
            background-color: #fff;
            border-bottom-color: #fff;
        }

    .tab-content {
        border: 1px solid rgba(255, 255, 255, 0.18);
        border-radius: 0 0 10px 10px;
        padding: 10px;
    }

    .gauge-chart {
        max-width: 300px;
        margin: 0 auto;
    }

    .server-switch {
        display: flex;
        align-items: center;
    }

    .server-switch-btn {
        background: none;
        border: none;
        cursor: pointer;
        font-size: 16px;
        margin: 0 5px;
    }

    #loadingScreen {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.5);
        z-index: 1000;
        align-items: center;
        justify-content: center;
        color: white;
        font-size: 20px;
    }

    .custom-table {
        box-shadow: 0 0 20px rgba(0, 0, 0, 0.15);
    }

        .custom-table thead th {
            background-color: #007bff; /* Bootstrap primary blue */
            color: white;
        }

        .custom-table tbody tr:nth-of-type(even) {
            background-color: #f3f3f3;
        }

        .custom-table tbody tr:last-of-type {
            border-bottom: 2px solid #009879;
        }


</style>
@* <div class="sidebar glass">
    <ul class="list-unstyled">
        <li>- Server 1</li>
        <li>- Server 2</li>
    </ul>
</div> *@

<div id="loadingScreen">
    <div class="loader"> 
        <div class="inner one"></div>
        <div class="inner two"></div>
        <div class="inner three"></div>
    </div>
</div>


<div class="server-switch">
    @* <button id="prevServer" class="server-switch-btn">&lt;</button> *@
    <select class="form-select" id="serverSelect" aria-label="Default select example">
        <option selected>Izberite strežnik</option>
        @foreach (var item in Model.Servers)
        {
            <option value="@item.Id">@item.ServerName</option>
        }
    </select>
@*     <button id="nextServer" class="server-switch-btn">&gt;</button> *@
</div>

<div class="main-content">
    <div class="d-flex flex-wrap justify-content-between">
        <div class="dashboard-item glass half">
            <h4>CPU Stanje</h4>
            <div><canvas id="cpuGauge" class="gauge-chart"></canvas></div>
        </div>
        <div class="dashboard-item glass half">
            <h4>RAM Stanje</h4>
            <div><canvas id="ramGauge" class="gauge-chart"></canvas></div>
        </div>
    </div>
    <div class="d-flex flex-wrap justify-content-between">
        <div class="dashboard-item glass quarter">
            <h4>Stanje DB</h4>
        </div>
        <div class="dashboard-item glass quarter">
            <h4>Run Time</h4>
        </div>
        <div class="dashboard-item glass quarter">
            <h4>Stanje MailServer</h4>
        </div>
        <div class="dashboard-item glass quarter">
            <h4>CPU Cores</h4>
        </div>
    </div>
    <div class="dashboard-item glass full-width">
        <h4>Trdi disk podatki</h4>
        <div id="diskProgressContainer"></div>
    </div>

    <div class="dashboard-item glass full-width">
        <div class="d-flex justify-content-between align-items-center">
            <h4>Izpadi</h4>
            <button class="btn btn-primary">Izpadi</button>
        </div>
        <div class="table-responsive">
            <table class="table table-striped table-hover custom-table">
                <thead>
                    <tr>
                        <th>ID Izpada</th>
                        <th>Datum Izpada</th>
                        <th>Razlog</th>
                    </tr>
                </thead>
                <tbody id="outagesTableBody">
                 @*    NEKI NEKI *@
                </tbody>
            </table>
        </div>
    </div>


</div>


<script>
    $(document).ready(function () {
        var cpuGaugeInstance, ramGaugeInstance, cpuHistoryInstance, ramHistoryInstance, diskProgressBarInstance;
        initializeGraphs();
        //connectToMQTT(8080);
        function connectToMQTT(port, serverId) {
            $("#loadingScreen").show();
            let connected = false;
            const client = mqtt.connect('ws://test.mosquitto.org:' + port);

            client.on("connect", function () {
                console.log("Connected to MQTT broker over WebSocket on port " + port);
                client.subscribe("test123/" + serverId);
                console.log("Subscribed to test123/" + serverId);
                connected = true;
            });

            client.on("message", function (topic, message) {
                console.log("Message received on topic: " + topic);
                try {
                    const data = JSON.parse(message.toString());
                    console.log("Parsed Data:", data);
                    updateGraphs(data);
                } catch (e) {
                    console.error("Error parsing MQTT message:", e);
                }
                // Hide the loading screen whether or not there was an error
                $("#loadingScreen").hide();
            });

            setTimeout(function () {
                if (!connected) {
                    console.error("Failed to establish MQTT connection on port " + port);
                    $("#loadingScreen").hide();
                    // Attempt to connect to the alternative port
                    if (port == 8080) {
                        connectToMQTT(8081, serverId);
                    } else if (port == 8081) {
                        connectToMQTT(8080, serverId);
                    }
                    client.end();
                }
            }, 5000);
            }
            
        $('#serverSelect').change(function () {
                var selectedValue = $(this).val();
                connectToMQTT(8080, selectedValue);    
            });
            
        function initializeGraphs(){
            //CPU
            var cpuGaugeCtx = document.getElementById("cpuGauge").getContext("2d");
            cpuGaugeInstance = new Chart(cpuGaugeCtx, gaugeChartConfig(100));
            
            // RAM Gauge
            var ramGaugeCtx = document.getElementById("ramGauge").getContext("2d");
            ramGaugeInstance = new Chart(ramGaugeCtx, gaugeChartConfig(50));
            
            var diskProgressContainer = document.getElementById("diskProgressContainer");
            diskProgressBarInstance = new ProgressBar.Line(diskProgressContainer, diskProgressBarConfig());
            diskProgressBarInstance.animate(0.25);
            
            var cpuHistoryCtx = document.getElementById("cpuHistoryChart").getContext("2d");
            cpuHistoryInstance = createHistoryChart(cpuHistoryCtx, [6, 5, 8, 3, 5, 1, 4], 'CPU Usage');
            
            @*var ramHistoryCtx = document.getElementById("ramHistoryChart").getContext("2d");
            ramHistoryInstance = createHistoryChart(ramHistoryCtx, [28, 48, 40, 19, 86, 27, 90], 'RAM Usage');*@
            
            
            }
            
        function gaugeChartConfig(value) {
                return {
                    type: 'gauge',
                    data: {
                        datasets: [{
                            value: value,
                            minValue: 0,
                            maxValue: 100,
                            data: [33, 66, 100],
                            backgroundColor: [
                                "rgba(75, 192, 192, 0.5)", //0-33
                                "rgba(255, 205, 86, 0.5)", //34-66
                                "rgba(255, 99, 132, 0.5)"  //67-100
                            ]
                        }]
                    },
                    options: gaugeChartOptions()
                };
            }
        
            function gaugeChartOptions() {
                return {
                    needle: {
                        radiusPercentage: 15,
                        widthPercentage: 3.2,
                        lengthPercentage: 80,
                        color: 'rgba(0, 0, 0, 1)'
                    },
                    valueLabel: {
                        display: true,
                        formatter: (value) => Math.round(value) + '%',
                        color: 'rgba(255, 255, 255, 1)',
                        backgroundColor: 'rgba(0, 0, 0, 1)',
                        text: 3,
                        borderRadius: 5,
                        padding: { top: 10, bottom: 10 }
                    }
                };
            }
            
            function diskProgressBarConfig() {
                return {
                    strokeWidth: 1,
                    easing: 'easeInOut',
                    duration: 1400,
                    color: '#007bff',
                    trailColor: '#eee',
                    trailWidth: 1,
                    svgStyle: { width: '100%', height: '100%' },
                    text: {
                        style: {
                            color: '#999',
                            position: 'absolute',
                            right: '5%',
                            top: '30px',
                            padding: 0,
                            margin: 0,
                            transform: null
                        },
                        autoStyleContainer: false
                    },
                    from: { color: '#FFEA82' },
                    to: { color: '#ED6A5A' },
                    step: (state, bar) => {
                        // Update the text as needed (e.g., used space / total space)
                        bar.setText("Update the text here");
                    }
                };
            }
            
        function createHistoryChart(canvasContext, chartData, chartLabel) {
                     return new Chart(canvasContext, {
                         type: 'bar',
                         data: {
                             labels: ['00:00', '01:00', '02:00', '03:00', '04:00', '05:00', '06:00'],
                             datasets: [{
                                 label: chartLabel,
                                 data: chartData,
                                 backgroundColor: 'rgba(54, 162, 235, 0.5)',
                                 borderColor: 'rgba(54, 162, 235, 1)',
                                 borderWidth: 1
                             }]
                         },
                         options: {
                             scales: {
                                 yAxes: [{
                                     ticks: {
                                         beginAtZero: true
                                     }
                                 }]
                             },
                             responsive: true,
                             maintainAspectRatio: false
                         }
                     });
                 }
                    
        function updateGraphs(valuesInJson) { 
                updateGauge(cpuGaugeInstance, parseFloat(valuesInJson.CpuUsage).toFixed(2));
                updateGauge(ramGaugeInstance, parseFloat(valuesInJson.UsedMemory).toFixed(2));
                
                
            }
        
        function updateGauge(gaugeInstance, value){
                gaugeInstance.data.datasets[0].value = value;
                gaugeInstance.update();
            }
        
        $('#myTab button').on('click', function (e) {
                var tabId = $(this).attr('aria-controls');
                loadGraph(tabId);
            });
        function loadGraph(tabId) {
                if (tabId === 'cpu') {

                } else if (tabId === 'ram') {
                    if (!ramHistoryInstance)
                        {
                            var ramHistoryCtx = document.getElementById("ramHistoryChart").getContext("2d");
                            ramHistoryInstance = createHistoryChart(ramHistoryCtx, [28, 48, 40, 19, 86, 27, 90], 'RAM Usage');
                            console.log("test");
                        }
                    
                }
            }
        var currentServerIndex = 0;
        var totalServers = $("#serverSelect option").length - 1;

        function changeServer(index) {
            $("#serverSelect").prop('selectedIndex', index);
            $("#serverSelect").change();
        }

        function animateServerChange() {
            $('.main-content').fadeOut('fast', function () {
                $('.main-content').fadeIn('fast');
            });
        }

        $("#prevServer").click(function () {
            if (currentServerIndex > 0) {
                currentServerIndex--;
                changeServer(currentServerIndex);
                animateServerChange();
            }
        });

        $("#nextServer").click(function () {
            if (currentServerIndex < totalServers) {
                currentServerIndex++;
                changeServer(currentServerIndex);
                animateServerChange();
            }
        });

        $("#serverSelect").change(function () {
            currentServerIndex = this.selectedIndex;
        });
    });

</script>



